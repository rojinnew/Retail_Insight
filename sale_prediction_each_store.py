# -*- coding: utf-8 -*-
"""sale_predictionv_each_store.ipynb
Automatically generated by Colaboratory.
Original file is located at
"""
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Some stats and preprocessing 
data = pd.read_csv("train.csv")
max_date = max(data["date"])
print("end date", max_date)
min_date = min(data["date"])
print("first date", min_date)

# number of items
item_count = data.item.nunique()
print("number of unique value of items", data.item.nunique())

# number of stores
item_count = data.store.nunique()
print("number of unique value of store", data.store.nunique())

# Range of date in the data
min_date = min(data["date"])
print("start date", min_date)
max_date = max(data["date"])
print("end date", max_date)

def predict_df(predictions, original_df):
    #create dataframe that shows the predicted sales
    result_list = []
    sales_dates = list(original_df[-13:].date)
    act_sales = list(original_df[-13:].sales)
    
    
    for index in range(0,len(predictions)):
        result_dict = {}
        result_dict['pred_value'] = int(predictions[index][0] + act_sales[index])
        result_dict['date'] = sales_dates[index+1]
        result_list.append(result_dict)
        
    df_result = pd.DataFrame(result_list)
    
    return df_result


model = LinearRegression()
k = 0
predicted_sales = {}
for item_id in range(1, 51):
#for item_id in range(1, 2):
    for store_id in range(1, 11):
      print("================")
      print("item_id",item_id)
      print("store_id",store_id)
      k +=1
      data = pd.read_csv("train.csv")
      data.date = data.date.apply(lambda x: str(x)[:-3])
      data = data[data["item"]==item_id]
      data = data[data["store"]==store_id]
      data_monthly = data.groupby('date')['sales'].sum().reset_index()  
      data_monthly.date = pd.to_datetime(data_monthly.date)  
      data_monthly.to_csv('./monthly_data.csv')
      data_monthly['sales_diff'] = data_monthly.sales.diff()
      data_diff = data_monthly.dropna()
      series = data_diff.copy()
      for i in range(1,12+1):
        col = 'lag_' + str(i)
      series[col] = series['sales_diff'].shift(i)    
      series = series.dropna().reset_index(drop=True)
      series.to_csv('model_data.csv', index=False)
      series = series.drop(['sales','date'],axis=1)

      # divide data into train and test
      train, test = series[0:-12].values, series[-12:].values

      #np.savetxt('train2.csv', train, delimiter=",")
      #np.savetxt('test2.csv', train, delimiter=",")  

      original = pd.read_csv('monthly_data.csv')
      X_train, y_train = train[:, 1:], train[:, 0:1]
      X_test, y_test = test[:, 1:], test[:, 0:1]

      # create a linear refression model 
      model.fit(X_train, y_train)
      predictions = model.predict(X_test)

      result = predict_df(predictions, original)
      result.to_csv('result.csv', index=False)
      filtered = result[result["date"] == "2017-12-01"]
      predicted_sales[(item_id, store_id)] = filtered["pred_value"].values[0]

      rmse = np.sqrt(mean_squared_error(original.sales[-12:], result.pred_value[-12:]))
      mae = mean_absolute_error(original.sales[-12:], result.pred_value[-12:])
      r2 = r2_score(original.sales[-12:], result.pred_value[-12:])
      print("performance measures")
      print("rmse: ",rmse)
      print("mae: ",mae)
      print("R2 score: ",r2)

      fig, ax = plt.subplots(figsize=(15,5))
      sns.lineplot(x = original.date, y= original.sales, data=original, ax=ax,  label='Original', color='black')
      sns.lineplot(x = result.date, y = result.pred_value, data=result, ax=ax,  label='Predicted', color='Red')   
      ax.set(xlabel = "Date",   ylabel = "Sales", title = "Sales Forecasting Prediction for item "+ str(item_id) + " at store " +str(store_id)  )
      ax.set_xticklabels(original.date.apply(lambda x: str(x)[5:-3]))
      ax.legend()
      sns.despine()
      plt.savefig("plot_output/plot_store"+ str(store_id)+"_item" + str(item_id)+ ".png")
for tup in predicted_sales.keys():
    item_id, store_id = tup[0], tup[1]
    print("The predicted sales for Dec of 2017 at store ",store_id, " and for item " , item_id , " is :"  ,predicted_sales[tup])
